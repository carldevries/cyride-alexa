# conftest is a Pytest file for setup, teardown, and general configuration of
# tests.
import pytest
import os
import logging

# Path to test resources relative to the cyride-alexa base project directory.
resources_path = 'src\\test\\resources\\'

# properties is a function annotated as a Pytest fixture which walks the
# test resources directory searching for properties files.  The properties
# in the files must be listed as key/value pairs with an equal sign between
# the key and value.  The function won't remove any whitespace between the
# key/value and the equal sign.  The properties are returned for consumption
# by functions or other fixtures in the test modules.


@pytest.fixture(scope='session')
def properties():

    properties = {}
    for root, dirs, files in os.walk(resources_path):
        for filename in files:
            if filename.count('.properties') > 0:
                if filename.count('template') == 0:

                    file = open(root + '\\' + filename)
                    content = file.read()
                    lines = content.splitlines()

                    for line in lines:
                        if line is not None and line != '':
                            key_value = line.split('=')
                            properties[key_value[0]] = key_value[1]

                    file.close()

    return properties

# logger is a function annotated as a Pytest fixture which creates a logging 
# formatter and a logging handler and sets them as the handler for root logger
# before executing Pytest tests. The fixture is annotated with a module scope
# and autouse is set to true so it will run once for each module and write all
# the statements generated by executing tests in the given test module to a
# unique log file.

@pytest.fixture(scope='module', autouse=True)
def logger(request):

    line_format = '%(asctime)s - %(levelname)s - %(module)s.%(funcName)s %(lineno)d: %(message)s'
    log_file = 'logs\\' + str(request.module.__name__) + '.log'

    formatter = logging.Formatter(line_format)

    file_handler = logging.FileHandler(log_file)
    file_handler.setLevel(logging.DEBUG)
    file_handler.setFormatter(formatter)

    logger = logging.getLogger()
    logger.setLevel(logging.DEBUG)
    logger.handlers = [file_handler]